// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/suyuan32/simple-admin-file/ent/cloudfile"
	"github.com/suyuan32/simple-admin-file/ent/storageprovider"
)

// CloudFile is the model entity for the CloudFile schema.
type CloudFile struct {
	config `json:"-"`
	// ID of the ent.
	// UUID
	ID uuid.UUID `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// State true: normal false: ban | 状态 true 正常 false 禁用
	State bool `json:"state,omitempty"`
	// The file's name | 文件名
	Name string `json:"name,omitempty"`
	// The file's url | 文件地址
	URL string `json:"url,omitempty"`
	// The file's size | 文件大小
	Size uint64 `json:"size,omitempty"`
	// The file's type | 文件类型
	FileType uint8 `json:"file_type,omitempty"`
	// The user who upload the file | 上传用户的 ID
	UserID string `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CloudFileQuery when eager-loading is set.
	Edges                        CloudFileEdges `json:"edges"`
	cloud_file_storage_providers *uint64
	selectValues                 sql.SelectValues
}

// CloudFileEdges holds the relations/edges for other nodes in the graph.
type CloudFileEdges struct {
	// StorageProviders holds the value of the storage_providers edge.
	StorageProviders *StorageProvider `json:"storage_providers,omitempty"`
	// Tags holds the value of the tags edge.
	Tags []*CloudFileTag `json:"tags,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// StorageProvidersOrErr returns the StorageProviders value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CloudFileEdges) StorageProvidersOrErr() (*StorageProvider, error) {
	if e.StorageProviders != nil {
		return e.StorageProviders, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: storageprovider.Label}
	}
	return nil, &NotLoadedError{edge: "storage_providers"}
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e CloudFileEdges) TagsOrErr() ([]*CloudFileTag, error) {
	if e.loadedTypes[1] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CloudFile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cloudfile.FieldState:
			values[i] = new(sql.NullBool)
		case cloudfile.FieldSize, cloudfile.FieldFileType:
			values[i] = new(sql.NullInt64)
		case cloudfile.FieldName, cloudfile.FieldURL, cloudfile.FieldUserID:
			values[i] = new(sql.NullString)
		case cloudfile.FieldCreatedAt, cloudfile.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case cloudfile.FieldID:
			values[i] = new(uuid.UUID)
		case cloudfile.ForeignKeys[0]: // cloud_file_storage_providers
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CloudFile fields.
func (cf *CloudFile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cloudfile.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cf.ID = *value
			}
		case cloudfile.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cf.CreatedAt = value.Time
			}
		case cloudfile.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cf.UpdatedAt = value.Time
			}
		case cloudfile.FieldState:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				cf.State = value.Bool
			}
		case cloudfile.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cf.Name = value.String
			}
		case cloudfile.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				cf.URL = value.String
			}
		case cloudfile.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				cf.Size = uint64(value.Int64)
			}
		case cloudfile.FieldFileType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field file_type", values[i])
			} else if value.Valid {
				cf.FileType = uint8(value.Int64)
			}
		case cloudfile.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				cf.UserID = value.String
			}
		case cloudfile.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field cloud_file_storage_providers", value)
			} else if value.Valid {
				cf.cloud_file_storage_providers = new(uint64)
				*cf.cloud_file_storage_providers = uint64(value.Int64)
			}
		default:
			cf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CloudFile.
// This includes values selected through modifiers, order, etc.
func (cf *CloudFile) Value(name string) (ent.Value, error) {
	return cf.selectValues.Get(name)
}

// QueryStorageProviders queries the "storage_providers" edge of the CloudFile entity.
func (cf *CloudFile) QueryStorageProviders() *StorageProviderQuery {
	return NewCloudFileClient(cf.config).QueryStorageProviders(cf)
}

// QueryTags queries the "tags" edge of the CloudFile entity.
func (cf *CloudFile) QueryTags() *CloudFileTagQuery {
	return NewCloudFileClient(cf.config).QueryTags(cf)
}

// Update returns a builder for updating this CloudFile.
// Note that you need to call CloudFile.Unwrap() before calling this method if this CloudFile
// was returned from a transaction, and the transaction was committed or rolled back.
func (cf *CloudFile) Update() *CloudFileUpdateOne {
	return NewCloudFileClient(cf.config).UpdateOne(cf)
}

// Unwrap unwraps the CloudFile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cf *CloudFile) Unwrap() *CloudFile {
	_tx, ok := cf.config.driver.(*txDriver)
	if !ok {
		panic("ent: CloudFile is not a transactional entity")
	}
	cf.config.driver = _tx.drv
	return cf
}

// String implements the fmt.Stringer.
func (cf *CloudFile) String() string {
	var builder strings.Builder
	builder.WriteString("CloudFile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cf.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cf.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cf.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", cf.State))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(cf.Name)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(cf.URL)
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", cf.Size))
	builder.WriteString(", ")
	builder.WriteString("file_type=")
	builder.WriteString(fmt.Sprintf("%v", cf.FileType))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(cf.UserID)
	builder.WriteByte(')')
	return builder.String()
}

// CloudFiles is a parsable slice of CloudFile.
type CloudFiles []*CloudFile
