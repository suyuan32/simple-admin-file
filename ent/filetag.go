// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/suyuan32/simple-admin-file/ent/filetag"
)

// File's Tags Table | 文件标签表
type FileTag struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Status 1: normal 2: ban | 状态 1 正常 2 禁用
	Status uint8 `json:"status,omitempty"`
	// FileTag's name | 标签名称
	Name string `json:"name,omitempty"`
	// The remark of tag | 标签的备注
	Remark string `json:"remark,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FileTagQuery when eager-loading is set.
	Edges        FileTagEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FileTagEdges holds the relations/edges for other nodes in the graph.
type FileTagEdges struct {
	// Files holds the value of the files edge.
	Files []*File `json:"files,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e FileTagEdges) FilesOrErr() ([]*File, error) {
	if e.loadedTypes[0] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FileTag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case filetag.FieldID, filetag.FieldStatus:
			values[i] = new(sql.NullInt64)
		case filetag.FieldName, filetag.FieldRemark:
			values[i] = new(sql.NullString)
		case filetag.FieldCreatedAt, filetag.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FileTag fields.
func (ft *FileTag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case filetag.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ft.ID = uint64(value.Int64)
		case filetag.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ft.CreatedAt = value.Time
			}
		case filetag.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ft.UpdatedAt = value.Time
			}
		case filetag.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ft.Status = uint8(value.Int64)
			}
		case filetag.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ft.Name = value.String
			}
		case filetag.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ft.Remark = value.String
			}
		default:
			ft.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FileTag.
// This includes values selected through modifiers, order, etc.
func (ft *FileTag) Value(name string) (ent.Value, error) {
	return ft.selectValues.Get(name)
}

// QueryFiles queries the "files" edge of the FileTag entity.
func (ft *FileTag) QueryFiles() *FileQuery {
	return NewFileTagClient(ft.config).QueryFiles(ft)
}

// Update returns a builder for updating this FileTag.
// Note that you need to call FileTag.Unwrap() before calling this method if this FileTag
// was returned from a transaction, and the transaction was committed or rolled back.
func (ft *FileTag) Update() *FileTagUpdateOne {
	return NewFileTagClient(ft.config).UpdateOne(ft)
}

// Unwrap unwraps the FileTag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ft *FileTag) Unwrap() *FileTag {
	_tx, ok := ft.config.driver.(*txDriver)
	if !ok {
		panic("ent: FileTag is not a transactional entity")
	}
	ft.config.driver = _tx.drv
	return ft
}

// String implements the fmt.Stringer.
func (ft *FileTag) String() string {
	var builder strings.Builder
	builder.WriteString("FileTag(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ft.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ft.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ft.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ft.Status))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ft.Name)
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(ft.Remark)
	builder.WriteByte(')')
	return builder.String()
}

// FileTags is a parsable slice of FileTag.
type FileTags []*FileTag
