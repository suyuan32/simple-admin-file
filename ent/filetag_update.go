// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/suyuan32/simple-admin-file/ent/file"
	"github.com/suyuan32/simple-admin-file/ent/filetag"
	"github.com/suyuan32/simple-admin-file/ent/predicate"
)

// FileTagUpdate is the builder for updating FileTag entities.
type FileTagUpdate struct {
	config
	hooks    []Hook
	mutation *FileTagMutation
}

// Where appends a list predicates to the FileTagUpdate builder.
func (_u *FileTagUpdate) Where(ps ...predicate.FileTag) *FileTagUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *FileTagUpdate) SetUpdatedAt(v time.Time) *FileTagUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *FileTagUpdate) SetStatus(v uint8) *FileTagUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *FileTagUpdate) SetNillableStatus(v *uint8) *FileTagUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *FileTagUpdate) AddStatus(v int8) *FileTagUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *FileTagUpdate) ClearStatus() *FileTagUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetName sets the "name" field.
func (_u *FileTagUpdate) SetName(v string) *FileTagUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *FileTagUpdate) SetNillableName(v *string) *FileTagUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetRemark sets the "remark" field.
func (_u *FileTagUpdate) SetRemark(v string) *FileTagUpdate {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *FileTagUpdate) SetNillableRemark(v *string) *FileTagUpdate {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *FileTagUpdate) ClearRemark() *FileTagUpdate {
	_u.mutation.ClearRemark()
	return _u
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *FileTagUpdate) AddFileIDs(ids ...uuid.UUID) *FileTagUpdate {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *FileTagUpdate) AddFiles(v ...*File) *FileTagUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// Mutation returns the FileTagMutation object of the builder.
func (_u *FileTagUpdate) Mutation() *FileTagMutation {
	return _u.mutation
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *FileTagUpdate) ClearFiles() *FileTagUpdate {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *FileTagUpdate) RemoveFileIDs(ids ...uuid.UUID) *FileTagUpdate {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *FileTagUpdate) RemoveFiles(v ...*File) *FileTagUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *FileTagUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FileTagUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *FileTagUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FileTagUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *FileTagUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := filetag.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *FileTagUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(filetag.Table, filetag.Columns, sqlgraph.NewFieldSpec(filetag.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(filetag.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(filetag.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(filetag.FieldStatus, field.TypeUint8, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(filetag.FieldStatus, field.TypeUint8)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(filetag.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(filetag.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(filetag.FieldRemark, field.TypeString)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   filetag.FilesTable,
			Columns: filetag.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   filetag.FilesTable,
			Columns: filetag.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   filetag.FilesTable,
			Columns: filetag.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filetag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// FileTagUpdateOne is the builder for updating a single FileTag entity.
type FileTagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FileTagMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *FileTagUpdateOne) SetUpdatedAt(v time.Time) *FileTagUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *FileTagUpdateOne) SetStatus(v uint8) *FileTagUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *FileTagUpdateOne) SetNillableStatus(v *uint8) *FileTagUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *FileTagUpdateOne) AddStatus(v int8) *FileTagUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *FileTagUpdateOne) ClearStatus() *FileTagUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetName sets the "name" field.
func (_u *FileTagUpdateOne) SetName(v string) *FileTagUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *FileTagUpdateOne) SetNillableName(v *string) *FileTagUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetRemark sets the "remark" field.
func (_u *FileTagUpdateOne) SetRemark(v string) *FileTagUpdateOne {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *FileTagUpdateOne) SetNillableRemark(v *string) *FileTagUpdateOne {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *FileTagUpdateOne) ClearRemark() *FileTagUpdateOne {
	_u.mutation.ClearRemark()
	return _u
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *FileTagUpdateOne) AddFileIDs(ids ...uuid.UUID) *FileTagUpdateOne {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *FileTagUpdateOne) AddFiles(v ...*File) *FileTagUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// Mutation returns the FileTagMutation object of the builder.
func (_u *FileTagUpdateOne) Mutation() *FileTagMutation {
	return _u.mutation
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *FileTagUpdateOne) ClearFiles() *FileTagUpdateOne {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *FileTagUpdateOne) RemoveFileIDs(ids ...uuid.UUID) *FileTagUpdateOne {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *FileTagUpdateOne) RemoveFiles(v ...*File) *FileTagUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// Where appends a list predicates to the FileTagUpdate builder.
func (_u *FileTagUpdateOne) Where(ps ...predicate.FileTag) *FileTagUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *FileTagUpdateOne) Select(field string, fields ...string) *FileTagUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated FileTag entity.
func (_u *FileTagUpdateOne) Save(ctx context.Context) (*FileTag, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FileTagUpdateOne) SaveX(ctx context.Context) *FileTag {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *FileTagUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FileTagUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *FileTagUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := filetag.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *FileTagUpdateOne) sqlSave(ctx context.Context) (_node *FileTag, err error) {
	_spec := sqlgraph.NewUpdateSpec(filetag.Table, filetag.Columns, sqlgraph.NewFieldSpec(filetag.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FileTag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, filetag.FieldID)
		for _, f := range fields {
			if !filetag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != filetag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(filetag.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(filetag.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(filetag.FieldStatus, field.TypeUint8, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(filetag.FieldStatus, field.TypeUint8)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(filetag.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(filetag.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(filetag.FieldRemark, field.TypeString)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   filetag.FilesTable,
			Columns: filetag.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   filetag.FilesTable,
			Columns: filetag.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   filetag.FilesTable,
			Columns: filetag.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FileTag{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filetag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
