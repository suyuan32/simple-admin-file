// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/suyuan32/simple-admin-file/ent/cloudfile"
	"github.com/suyuan32/simple-admin-file/ent/cloudfiletag"
	"github.com/suyuan32/simple-admin-file/ent/predicate"
	"github.com/suyuan32/simple-admin-file/ent/storageprovider"
)

// CloudFileUpdate is the builder for updating CloudFile entities.
type CloudFileUpdate struct {
	config
	hooks    []Hook
	mutation *CloudFileMutation
}

// Where appends a list predicates to the CloudFileUpdate builder.
func (_u *CloudFileUpdate) Where(ps ...predicate.CloudFile) *CloudFileUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CloudFileUpdate) SetUpdatedAt(v time.Time) *CloudFileUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetState sets the "state" field.
func (_u *CloudFileUpdate) SetState(v bool) *CloudFileUpdate {
	_u.mutation.SetState(v)
	return _u
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_u *CloudFileUpdate) SetNillableState(v *bool) *CloudFileUpdate {
	if v != nil {
		_u.SetState(*v)
	}
	return _u
}

// ClearState clears the value of the "state" field.
func (_u *CloudFileUpdate) ClearState() *CloudFileUpdate {
	_u.mutation.ClearState()
	return _u
}

// SetName sets the "name" field.
func (_u *CloudFileUpdate) SetName(v string) *CloudFileUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CloudFileUpdate) SetNillableName(v *string) *CloudFileUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetURL sets the "url" field.
func (_u *CloudFileUpdate) SetURL(v string) *CloudFileUpdate {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *CloudFileUpdate) SetNillableURL(v *string) *CloudFileUpdate {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// SetSize sets the "size" field.
func (_u *CloudFileUpdate) SetSize(v uint64) *CloudFileUpdate {
	_u.mutation.ResetSize()
	_u.mutation.SetSize(v)
	return _u
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (_u *CloudFileUpdate) SetNillableSize(v *uint64) *CloudFileUpdate {
	if v != nil {
		_u.SetSize(*v)
	}
	return _u
}

// AddSize adds value to the "size" field.
func (_u *CloudFileUpdate) AddSize(v int64) *CloudFileUpdate {
	_u.mutation.AddSize(v)
	return _u
}

// SetFileType sets the "file_type" field.
func (_u *CloudFileUpdate) SetFileType(v uint8) *CloudFileUpdate {
	_u.mutation.ResetFileType()
	_u.mutation.SetFileType(v)
	return _u
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (_u *CloudFileUpdate) SetNillableFileType(v *uint8) *CloudFileUpdate {
	if v != nil {
		_u.SetFileType(*v)
	}
	return _u
}

// AddFileType adds value to the "file_type" field.
func (_u *CloudFileUpdate) AddFileType(v int8) *CloudFileUpdate {
	_u.mutation.AddFileType(v)
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *CloudFileUpdate) SetUserID(v string) *CloudFileUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *CloudFileUpdate) SetNillableUserID(v *string) *CloudFileUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetStorageProvidersID sets the "storage_providers" edge to the StorageProvider entity by ID.
func (_u *CloudFileUpdate) SetStorageProvidersID(id uint64) *CloudFileUpdate {
	_u.mutation.SetStorageProvidersID(id)
	return _u
}

// SetNillableStorageProvidersID sets the "storage_providers" edge to the StorageProvider entity by ID if the given value is not nil.
func (_u *CloudFileUpdate) SetNillableStorageProvidersID(id *uint64) *CloudFileUpdate {
	if id != nil {
		_u = _u.SetStorageProvidersID(*id)
	}
	return _u
}

// SetStorageProviders sets the "storage_providers" edge to the StorageProvider entity.
func (_u *CloudFileUpdate) SetStorageProviders(v *StorageProvider) *CloudFileUpdate {
	return _u.SetStorageProvidersID(v.ID)
}

// AddTagIDs adds the "tags" edge to the CloudFileTag entity by IDs.
func (_u *CloudFileUpdate) AddTagIDs(ids ...uint64) *CloudFileUpdate {
	_u.mutation.AddTagIDs(ids...)
	return _u
}

// AddTags adds the "tags" edges to the CloudFileTag entity.
func (_u *CloudFileUpdate) AddTags(v ...*CloudFileTag) *CloudFileUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTagIDs(ids...)
}

// Mutation returns the CloudFileMutation object of the builder.
func (_u *CloudFileUpdate) Mutation() *CloudFileMutation {
	return _u.mutation
}

// ClearStorageProviders clears the "storage_providers" edge to the StorageProvider entity.
func (_u *CloudFileUpdate) ClearStorageProviders() *CloudFileUpdate {
	_u.mutation.ClearStorageProviders()
	return _u
}

// ClearTags clears all "tags" edges to the CloudFileTag entity.
func (_u *CloudFileUpdate) ClearTags() *CloudFileUpdate {
	_u.mutation.ClearTags()
	return _u
}

// RemoveTagIDs removes the "tags" edge to CloudFileTag entities by IDs.
func (_u *CloudFileUpdate) RemoveTagIDs(ids ...uint64) *CloudFileUpdate {
	_u.mutation.RemoveTagIDs(ids...)
	return _u
}

// RemoveTags removes "tags" edges to CloudFileTag entities.
func (_u *CloudFileUpdate) RemoveTags(v ...*CloudFileTag) *CloudFileUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CloudFileUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CloudFileUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CloudFileUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CloudFileUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CloudFileUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := cloudfile.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *CloudFileUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(cloudfile.Table, cloudfile.Columns, sqlgraph.NewFieldSpec(cloudfile.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(cloudfile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.State(); ok {
		_spec.SetField(cloudfile.FieldState, field.TypeBool, value)
	}
	if _u.mutation.StateCleared() {
		_spec.ClearField(cloudfile.FieldState, field.TypeBool)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(cloudfile.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(cloudfile.FieldURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.Size(); ok {
		_spec.SetField(cloudfile.FieldSize, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedSize(); ok {
		_spec.AddField(cloudfile.FieldSize, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.FileType(); ok {
		_spec.SetField(cloudfile.FieldFileType, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedFileType(); ok {
		_spec.AddField(cloudfile.FieldFileType, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(cloudfile.FieldUserID, field.TypeString, value)
	}
	if _u.mutation.StorageProvidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cloudfile.StorageProvidersTable,
			Columns: []string{cloudfile.StorageProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storageprovider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StorageProvidersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cloudfile.StorageProvidersTable,
			Columns: []string{cloudfile.StorageProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storageprovider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   cloudfile.TagsTable,
			Columns: cloudfile.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudfiletag.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTagsIDs(); len(nodes) > 0 && !_u.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   cloudfile.TagsTable,
			Columns: cloudfile.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudfiletag.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   cloudfile.TagsTable,
			Columns: cloudfile.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudfiletag.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cloudfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// CloudFileUpdateOne is the builder for updating a single CloudFile entity.
type CloudFileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CloudFileMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CloudFileUpdateOne) SetUpdatedAt(v time.Time) *CloudFileUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetState sets the "state" field.
func (_u *CloudFileUpdateOne) SetState(v bool) *CloudFileUpdateOne {
	_u.mutation.SetState(v)
	return _u
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_u *CloudFileUpdateOne) SetNillableState(v *bool) *CloudFileUpdateOne {
	if v != nil {
		_u.SetState(*v)
	}
	return _u
}

// ClearState clears the value of the "state" field.
func (_u *CloudFileUpdateOne) ClearState() *CloudFileUpdateOne {
	_u.mutation.ClearState()
	return _u
}

// SetName sets the "name" field.
func (_u *CloudFileUpdateOne) SetName(v string) *CloudFileUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CloudFileUpdateOne) SetNillableName(v *string) *CloudFileUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetURL sets the "url" field.
func (_u *CloudFileUpdateOne) SetURL(v string) *CloudFileUpdateOne {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *CloudFileUpdateOne) SetNillableURL(v *string) *CloudFileUpdateOne {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// SetSize sets the "size" field.
func (_u *CloudFileUpdateOne) SetSize(v uint64) *CloudFileUpdateOne {
	_u.mutation.ResetSize()
	_u.mutation.SetSize(v)
	return _u
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (_u *CloudFileUpdateOne) SetNillableSize(v *uint64) *CloudFileUpdateOne {
	if v != nil {
		_u.SetSize(*v)
	}
	return _u
}

// AddSize adds value to the "size" field.
func (_u *CloudFileUpdateOne) AddSize(v int64) *CloudFileUpdateOne {
	_u.mutation.AddSize(v)
	return _u
}

// SetFileType sets the "file_type" field.
func (_u *CloudFileUpdateOne) SetFileType(v uint8) *CloudFileUpdateOne {
	_u.mutation.ResetFileType()
	_u.mutation.SetFileType(v)
	return _u
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (_u *CloudFileUpdateOne) SetNillableFileType(v *uint8) *CloudFileUpdateOne {
	if v != nil {
		_u.SetFileType(*v)
	}
	return _u
}

// AddFileType adds value to the "file_type" field.
func (_u *CloudFileUpdateOne) AddFileType(v int8) *CloudFileUpdateOne {
	_u.mutation.AddFileType(v)
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *CloudFileUpdateOne) SetUserID(v string) *CloudFileUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *CloudFileUpdateOne) SetNillableUserID(v *string) *CloudFileUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetStorageProvidersID sets the "storage_providers" edge to the StorageProvider entity by ID.
func (_u *CloudFileUpdateOne) SetStorageProvidersID(id uint64) *CloudFileUpdateOne {
	_u.mutation.SetStorageProvidersID(id)
	return _u
}

// SetNillableStorageProvidersID sets the "storage_providers" edge to the StorageProvider entity by ID if the given value is not nil.
func (_u *CloudFileUpdateOne) SetNillableStorageProvidersID(id *uint64) *CloudFileUpdateOne {
	if id != nil {
		_u = _u.SetStorageProvidersID(*id)
	}
	return _u
}

// SetStorageProviders sets the "storage_providers" edge to the StorageProvider entity.
func (_u *CloudFileUpdateOne) SetStorageProviders(v *StorageProvider) *CloudFileUpdateOne {
	return _u.SetStorageProvidersID(v.ID)
}

// AddTagIDs adds the "tags" edge to the CloudFileTag entity by IDs.
func (_u *CloudFileUpdateOne) AddTagIDs(ids ...uint64) *CloudFileUpdateOne {
	_u.mutation.AddTagIDs(ids...)
	return _u
}

// AddTags adds the "tags" edges to the CloudFileTag entity.
func (_u *CloudFileUpdateOne) AddTags(v ...*CloudFileTag) *CloudFileUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTagIDs(ids...)
}

// Mutation returns the CloudFileMutation object of the builder.
func (_u *CloudFileUpdateOne) Mutation() *CloudFileMutation {
	return _u.mutation
}

// ClearStorageProviders clears the "storage_providers" edge to the StorageProvider entity.
func (_u *CloudFileUpdateOne) ClearStorageProviders() *CloudFileUpdateOne {
	_u.mutation.ClearStorageProviders()
	return _u
}

// ClearTags clears all "tags" edges to the CloudFileTag entity.
func (_u *CloudFileUpdateOne) ClearTags() *CloudFileUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// RemoveTagIDs removes the "tags" edge to CloudFileTag entities by IDs.
func (_u *CloudFileUpdateOne) RemoveTagIDs(ids ...uint64) *CloudFileUpdateOne {
	_u.mutation.RemoveTagIDs(ids...)
	return _u
}

// RemoveTags removes "tags" edges to CloudFileTag entities.
func (_u *CloudFileUpdateOne) RemoveTags(v ...*CloudFileTag) *CloudFileUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTagIDs(ids...)
}

// Where appends a list predicates to the CloudFileUpdate builder.
func (_u *CloudFileUpdateOne) Where(ps ...predicate.CloudFile) *CloudFileUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CloudFileUpdateOne) Select(field string, fields ...string) *CloudFileUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated CloudFile entity.
func (_u *CloudFileUpdateOne) Save(ctx context.Context) (*CloudFile, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CloudFileUpdateOne) SaveX(ctx context.Context) *CloudFile {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CloudFileUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CloudFileUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CloudFileUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := cloudfile.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *CloudFileUpdateOne) sqlSave(ctx context.Context) (_node *CloudFile, err error) {
	_spec := sqlgraph.NewUpdateSpec(cloudfile.Table, cloudfile.Columns, sqlgraph.NewFieldSpec(cloudfile.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CloudFile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cloudfile.FieldID)
		for _, f := range fields {
			if !cloudfile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cloudfile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(cloudfile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.State(); ok {
		_spec.SetField(cloudfile.FieldState, field.TypeBool, value)
	}
	if _u.mutation.StateCleared() {
		_spec.ClearField(cloudfile.FieldState, field.TypeBool)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(cloudfile.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(cloudfile.FieldURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.Size(); ok {
		_spec.SetField(cloudfile.FieldSize, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedSize(); ok {
		_spec.AddField(cloudfile.FieldSize, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.FileType(); ok {
		_spec.SetField(cloudfile.FieldFileType, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedFileType(); ok {
		_spec.AddField(cloudfile.FieldFileType, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(cloudfile.FieldUserID, field.TypeString, value)
	}
	if _u.mutation.StorageProvidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cloudfile.StorageProvidersTable,
			Columns: []string{cloudfile.StorageProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storageprovider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StorageProvidersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cloudfile.StorageProvidersTable,
			Columns: []string{cloudfile.StorageProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storageprovider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   cloudfile.TagsTable,
			Columns: cloudfile.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudfiletag.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTagsIDs(); len(nodes) > 0 && !_u.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   cloudfile.TagsTable,
			Columns: cloudfile.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudfiletag.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   cloudfile.TagsTable,
			Columns: cloudfile.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudfiletag.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CloudFile{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cloudfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
