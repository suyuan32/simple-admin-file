// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/suyuan32/simple-admin-file/ent/cloudfile"
	"github.com/suyuan32/simple-admin-file/ent/predicate"
	"github.com/suyuan32/simple-admin-file/ent/storageprovider"
)

// StorageProviderUpdate is the builder for updating StorageProvider entities.
type StorageProviderUpdate struct {
	config
	hooks    []Hook
	mutation *StorageProviderMutation
}

// Where appends a list predicates to the StorageProviderUpdate builder.
func (_u *StorageProviderUpdate) Where(ps ...predicate.StorageProvider) *StorageProviderUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *StorageProviderUpdate) SetUpdatedAt(v time.Time) *StorageProviderUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetState sets the "state" field.
func (_u *StorageProviderUpdate) SetState(v bool) *StorageProviderUpdate {
	_u.mutation.SetState(v)
	return _u
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_u *StorageProviderUpdate) SetNillableState(v *bool) *StorageProviderUpdate {
	if v != nil {
		_u.SetState(*v)
	}
	return _u
}

// ClearState clears the value of the "state" field.
func (_u *StorageProviderUpdate) ClearState() *StorageProviderUpdate {
	_u.mutation.ClearState()
	return _u
}

// SetName sets the "name" field.
func (_u *StorageProviderUpdate) SetName(v string) *StorageProviderUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *StorageProviderUpdate) SetNillableName(v *string) *StorageProviderUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetBucket sets the "bucket" field.
func (_u *StorageProviderUpdate) SetBucket(v string) *StorageProviderUpdate {
	_u.mutation.SetBucket(v)
	return _u
}

// SetNillableBucket sets the "bucket" field if the given value is not nil.
func (_u *StorageProviderUpdate) SetNillableBucket(v *string) *StorageProviderUpdate {
	if v != nil {
		_u.SetBucket(*v)
	}
	return _u
}

// SetSecretID sets the "secret_id" field.
func (_u *StorageProviderUpdate) SetSecretID(v string) *StorageProviderUpdate {
	_u.mutation.SetSecretID(v)
	return _u
}

// SetNillableSecretID sets the "secret_id" field if the given value is not nil.
func (_u *StorageProviderUpdate) SetNillableSecretID(v *string) *StorageProviderUpdate {
	if v != nil {
		_u.SetSecretID(*v)
	}
	return _u
}

// SetSecretKey sets the "secret_key" field.
func (_u *StorageProviderUpdate) SetSecretKey(v string) *StorageProviderUpdate {
	_u.mutation.SetSecretKey(v)
	return _u
}

// SetNillableSecretKey sets the "secret_key" field if the given value is not nil.
func (_u *StorageProviderUpdate) SetNillableSecretKey(v *string) *StorageProviderUpdate {
	if v != nil {
		_u.SetSecretKey(*v)
	}
	return _u
}

// SetEndpoint sets the "endpoint" field.
func (_u *StorageProviderUpdate) SetEndpoint(v string) *StorageProviderUpdate {
	_u.mutation.SetEndpoint(v)
	return _u
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (_u *StorageProviderUpdate) SetNillableEndpoint(v *string) *StorageProviderUpdate {
	if v != nil {
		_u.SetEndpoint(*v)
	}
	return _u
}

// SetFolder sets the "folder" field.
func (_u *StorageProviderUpdate) SetFolder(v string) *StorageProviderUpdate {
	_u.mutation.SetFolder(v)
	return _u
}

// SetNillableFolder sets the "folder" field if the given value is not nil.
func (_u *StorageProviderUpdate) SetNillableFolder(v *string) *StorageProviderUpdate {
	if v != nil {
		_u.SetFolder(*v)
	}
	return _u
}

// ClearFolder clears the value of the "folder" field.
func (_u *StorageProviderUpdate) ClearFolder() *StorageProviderUpdate {
	_u.mutation.ClearFolder()
	return _u
}

// SetRegion sets the "region" field.
func (_u *StorageProviderUpdate) SetRegion(v string) *StorageProviderUpdate {
	_u.mutation.SetRegion(v)
	return _u
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (_u *StorageProviderUpdate) SetNillableRegion(v *string) *StorageProviderUpdate {
	if v != nil {
		_u.SetRegion(*v)
	}
	return _u
}

// SetIsDefault sets the "is_default" field.
func (_u *StorageProviderUpdate) SetIsDefault(v bool) *StorageProviderUpdate {
	_u.mutation.SetIsDefault(v)
	return _u
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (_u *StorageProviderUpdate) SetNillableIsDefault(v *bool) *StorageProviderUpdate {
	if v != nil {
		_u.SetIsDefault(*v)
	}
	return _u
}

// SetUseCdn sets the "use_cdn" field.
func (_u *StorageProviderUpdate) SetUseCdn(v bool) *StorageProviderUpdate {
	_u.mutation.SetUseCdn(v)
	return _u
}

// SetNillableUseCdn sets the "use_cdn" field if the given value is not nil.
func (_u *StorageProviderUpdate) SetNillableUseCdn(v *bool) *StorageProviderUpdate {
	if v != nil {
		_u.SetUseCdn(*v)
	}
	return _u
}

// SetCdnURL sets the "cdn_url" field.
func (_u *StorageProviderUpdate) SetCdnURL(v string) *StorageProviderUpdate {
	_u.mutation.SetCdnURL(v)
	return _u
}

// SetNillableCdnURL sets the "cdn_url" field if the given value is not nil.
func (_u *StorageProviderUpdate) SetNillableCdnURL(v *string) *StorageProviderUpdate {
	if v != nil {
		_u.SetCdnURL(*v)
	}
	return _u
}

// ClearCdnURL clears the value of the "cdn_url" field.
func (_u *StorageProviderUpdate) ClearCdnURL() *StorageProviderUpdate {
	_u.mutation.ClearCdnURL()
	return _u
}

// AddCloudfileIDs adds the "cloudfiles" edge to the CloudFile entity by IDs.
func (_u *StorageProviderUpdate) AddCloudfileIDs(ids ...uuid.UUID) *StorageProviderUpdate {
	_u.mutation.AddCloudfileIDs(ids...)
	return _u
}

// AddCloudfiles adds the "cloudfiles" edges to the CloudFile entity.
func (_u *StorageProviderUpdate) AddCloudfiles(v ...*CloudFile) *StorageProviderUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCloudfileIDs(ids...)
}

// Mutation returns the StorageProviderMutation object of the builder.
func (_u *StorageProviderUpdate) Mutation() *StorageProviderMutation {
	return _u.mutation
}

// ClearCloudfiles clears all "cloudfiles" edges to the CloudFile entity.
func (_u *StorageProviderUpdate) ClearCloudfiles() *StorageProviderUpdate {
	_u.mutation.ClearCloudfiles()
	return _u
}

// RemoveCloudfileIDs removes the "cloudfiles" edge to CloudFile entities by IDs.
func (_u *StorageProviderUpdate) RemoveCloudfileIDs(ids ...uuid.UUID) *StorageProviderUpdate {
	_u.mutation.RemoveCloudfileIDs(ids...)
	return _u
}

// RemoveCloudfiles removes "cloudfiles" edges to CloudFile entities.
func (_u *StorageProviderUpdate) RemoveCloudfiles(v ...*CloudFile) *StorageProviderUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCloudfileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *StorageProviderUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StorageProviderUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *StorageProviderUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StorageProviderUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *StorageProviderUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := storageprovider.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *StorageProviderUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(storageprovider.Table, storageprovider.Columns, sqlgraph.NewFieldSpec(storageprovider.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(storageprovider.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.State(); ok {
		_spec.SetField(storageprovider.FieldState, field.TypeBool, value)
	}
	if _u.mutation.StateCleared() {
		_spec.ClearField(storageprovider.FieldState, field.TypeBool)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(storageprovider.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Bucket(); ok {
		_spec.SetField(storageprovider.FieldBucket, field.TypeString, value)
	}
	if value, ok := _u.mutation.SecretID(); ok {
		_spec.SetField(storageprovider.FieldSecretID, field.TypeString, value)
	}
	if value, ok := _u.mutation.SecretKey(); ok {
		_spec.SetField(storageprovider.FieldSecretKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.Endpoint(); ok {
		_spec.SetField(storageprovider.FieldEndpoint, field.TypeString, value)
	}
	if value, ok := _u.mutation.Folder(); ok {
		_spec.SetField(storageprovider.FieldFolder, field.TypeString, value)
	}
	if _u.mutation.FolderCleared() {
		_spec.ClearField(storageprovider.FieldFolder, field.TypeString)
	}
	if value, ok := _u.mutation.Region(); ok {
		_spec.SetField(storageprovider.FieldRegion, field.TypeString, value)
	}
	if value, ok := _u.mutation.IsDefault(); ok {
		_spec.SetField(storageprovider.FieldIsDefault, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UseCdn(); ok {
		_spec.SetField(storageprovider.FieldUseCdn, field.TypeBool, value)
	}
	if value, ok := _u.mutation.CdnURL(); ok {
		_spec.SetField(storageprovider.FieldCdnURL, field.TypeString, value)
	}
	if _u.mutation.CdnURLCleared() {
		_spec.ClearField(storageprovider.FieldCdnURL, field.TypeString)
	}
	if _u.mutation.CloudfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   storageprovider.CloudfilesTable,
			Columns: []string{storageprovider.CloudfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudfile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCloudfilesIDs(); len(nodes) > 0 && !_u.mutation.CloudfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   storageprovider.CloudfilesTable,
			Columns: []string{storageprovider.CloudfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudfile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CloudfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   storageprovider.CloudfilesTable,
			Columns: []string{storageprovider.CloudfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudfile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storageprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// StorageProviderUpdateOne is the builder for updating a single StorageProvider entity.
type StorageProviderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StorageProviderMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *StorageProviderUpdateOne) SetUpdatedAt(v time.Time) *StorageProviderUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetState sets the "state" field.
func (_u *StorageProviderUpdateOne) SetState(v bool) *StorageProviderUpdateOne {
	_u.mutation.SetState(v)
	return _u
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_u *StorageProviderUpdateOne) SetNillableState(v *bool) *StorageProviderUpdateOne {
	if v != nil {
		_u.SetState(*v)
	}
	return _u
}

// ClearState clears the value of the "state" field.
func (_u *StorageProviderUpdateOne) ClearState() *StorageProviderUpdateOne {
	_u.mutation.ClearState()
	return _u
}

// SetName sets the "name" field.
func (_u *StorageProviderUpdateOne) SetName(v string) *StorageProviderUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *StorageProviderUpdateOne) SetNillableName(v *string) *StorageProviderUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetBucket sets the "bucket" field.
func (_u *StorageProviderUpdateOne) SetBucket(v string) *StorageProviderUpdateOne {
	_u.mutation.SetBucket(v)
	return _u
}

// SetNillableBucket sets the "bucket" field if the given value is not nil.
func (_u *StorageProviderUpdateOne) SetNillableBucket(v *string) *StorageProviderUpdateOne {
	if v != nil {
		_u.SetBucket(*v)
	}
	return _u
}

// SetSecretID sets the "secret_id" field.
func (_u *StorageProviderUpdateOne) SetSecretID(v string) *StorageProviderUpdateOne {
	_u.mutation.SetSecretID(v)
	return _u
}

// SetNillableSecretID sets the "secret_id" field if the given value is not nil.
func (_u *StorageProviderUpdateOne) SetNillableSecretID(v *string) *StorageProviderUpdateOne {
	if v != nil {
		_u.SetSecretID(*v)
	}
	return _u
}

// SetSecretKey sets the "secret_key" field.
func (_u *StorageProviderUpdateOne) SetSecretKey(v string) *StorageProviderUpdateOne {
	_u.mutation.SetSecretKey(v)
	return _u
}

// SetNillableSecretKey sets the "secret_key" field if the given value is not nil.
func (_u *StorageProviderUpdateOne) SetNillableSecretKey(v *string) *StorageProviderUpdateOne {
	if v != nil {
		_u.SetSecretKey(*v)
	}
	return _u
}

// SetEndpoint sets the "endpoint" field.
func (_u *StorageProviderUpdateOne) SetEndpoint(v string) *StorageProviderUpdateOne {
	_u.mutation.SetEndpoint(v)
	return _u
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (_u *StorageProviderUpdateOne) SetNillableEndpoint(v *string) *StorageProviderUpdateOne {
	if v != nil {
		_u.SetEndpoint(*v)
	}
	return _u
}

// SetFolder sets the "folder" field.
func (_u *StorageProviderUpdateOne) SetFolder(v string) *StorageProviderUpdateOne {
	_u.mutation.SetFolder(v)
	return _u
}

// SetNillableFolder sets the "folder" field if the given value is not nil.
func (_u *StorageProviderUpdateOne) SetNillableFolder(v *string) *StorageProviderUpdateOne {
	if v != nil {
		_u.SetFolder(*v)
	}
	return _u
}

// ClearFolder clears the value of the "folder" field.
func (_u *StorageProviderUpdateOne) ClearFolder() *StorageProviderUpdateOne {
	_u.mutation.ClearFolder()
	return _u
}

// SetRegion sets the "region" field.
func (_u *StorageProviderUpdateOne) SetRegion(v string) *StorageProviderUpdateOne {
	_u.mutation.SetRegion(v)
	return _u
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (_u *StorageProviderUpdateOne) SetNillableRegion(v *string) *StorageProviderUpdateOne {
	if v != nil {
		_u.SetRegion(*v)
	}
	return _u
}

// SetIsDefault sets the "is_default" field.
func (_u *StorageProviderUpdateOne) SetIsDefault(v bool) *StorageProviderUpdateOne {
	_u.mutation.SetIsDefault(v)
	return _u
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (_u *StorageProviderUpdateOne) SetNillableIsDefault(v *bool) *StorageProviderUpdateOne {
	if v != nil {
		_u.SetIsDefault(*v)
	}
	return _u
}

// SetUseCdn sets the "use_cdn" field.
func (_u *StorageProviderUpdateOne) SetUseCdn(v bool) *StorageProviderUpdateOne {
	_u.mutation.SetUseCdn(v)
	return _u
}

// SetNillableUseCdn sets the "use_cdn" field if the given value is not nil.
func (_u *StorageProviderUpdateOne) SetNillableUseCdn(v *bool) *StorageProviderUpdateOne {
	if v != nil {
		_u.SetUseCdn(*v)
	}
	return _u
}

// SetCdnURL sets the "cdn_url" field.
func (_u *StorageProviderUpdateOne) SetCdnURL(v string) *StorageProviderUpdateOne {
	_u.mutation.SetCdnURL(v)
	return _u
}

// SetNillableCdnURL sets the "cdn_url" field if the given value is not nil.
func (_u *StorageProviderUpdateOne) SetNillableCdnURL(v *string) *StorageProviderUpdateOne {
	if v != nil {
		_u.SetCdnURL(*v)
	}
	return _u
}

// ClearCdnURL clears the value of the "cdn_url" field.
func (_u *StorageProviderUpdateOne) ClearCdnURL() *StorageProviderUpdateOne {
	_u.mutation.ClearCdnURL()
	return _u
}

// AddCloudfileIDs adds the "cloudfiles" edge to the CloudFile entity by IDs.
func (_u *StorageProviderUpdateOne) AddCloudfileIDs(ids ...uuid.UUID) *StorageProviderUpdateOne {
	_u.mutation.AddCloudfileIDs(ids...)
	return _u
}

// AddCloudfiles adds the "cloudfiles" edges to the CloudFile entity.
func (_u *StorageProviderUpdateOne) AddCloudfiles(v ...*CloudFile) *StorageProviderUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCloudfileIDs(ids...)
}

// Mutation returns the StorageProviderMutation object of the builder.
func (_u *StorageProviderUpdateOne) Mutation() *StorageProviderMutation {
	return _u.mutation
}

// ClearCloudfiles clears all "cloudfiles" edges to the CloudFile entity.
func (_u *StorageProviderUpdateOne) ClearCloudfiles() *StorageProviderUpdateOne {
	_u.mutation.ClearCloudfiles()
	return _u
}

// RemoveCloudfileIDs removes the "cloudfiles" edge to CloudFile entities by IDs.
func (_u *StorageProviderUpdateOne) RemoveCloudfileIDs(ids ...uuid.UUID) *StorageProviderUpdateOne {
	_u.mutation.RemoveCloudfileIDs(ids...)
	return _u
}

// RemoveCloudfiles removes "cloudfiles" edges to CloudFile entities.
func (_u *StorageProviderUpdateOne) RemoveCloudfiles(v ...*CloudFile) *StorageProviderUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCloudfileIDs(ids...)
}

// Where appends a list predicates to the StorageProviderUpdate builder.
func (_u *StorageProviderUpdateOne) Where(ps ...predicate.StorageProvider) *StorageProviderUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *StorageProviderUpdateOne) Select(field string, fields ...string) *StorageProviderUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated StorageProvider entity.
func (_u *StorageProviderUpdateOne) Save(ctx context.Context) (*StorageProvider, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StorageProviderUpdateOne) SaveX(ctx context.Context) *StorageProvider {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *StorageProviderUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StorageProviderUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *StorageProviderUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := storageprovider.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *StorageProviderUpdateOne) sqlSave(ctx context.Context) (_node *StorageProvider, err error) {
	_spec := sqlgraph.NewUpdateSpec(storageprovider.Table, storageprovider.Columns, sqlgraph.NewFieldSpec(storageprovider.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StorageProvider.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, storageprovider.FieldID)
		for _, f := range fields {
			if !storageprovider.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != storageprovider.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(storageprovider.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.State(); ok {
		_spec.SetField(storageprovider.FieldState, field.TypeBool, value)
	}
	if _u.mutation.StateCleared() {
		_spec.ClearField(storageprovider.FieldState, field.TypeBool)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(storageprovider.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Bucket(); ok {
		_spec.SetField(storageprovider.FieldBucket, field.TypeString, value)
	}
	if value, ok := _u.mutation.SecretID(); ok {
		_spec.SetField(storageprovider.FieldSecretID, field.TypeString, value)
	}
	if value, ok := _u.mutation.SecretKey(); ok {
		_spec.SetField(storageprovider.FieldSecretKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.Endpoint(); ok {
		_spec.SetField(storageprovider.FieldEndpoint, field.TypeString, value)
	}
	if value, ok := _u.mutation.Folder(); ok {
		_spec.SetField(storageprovider.FieldFolder, field.TypeString, value)
	}
	if _u.mutation.FolderCleared() {
		_spec.ClearField(storageprovider.FieldFolder, field.TypeString)
	}
	if value, ok := _u.mutation.Region(); ok {
		_spec.SetField(storageprovider.FieldRegion, field.TypeString, value)
	}
	if value, ok := _u.mutation.IsDefault(); ok {
		_spec.SetField(storageprovider.FieldIsDefault, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UseCdn(); ok {
		_spec.SetField(storageprovider.FieldUseCdn, field.TypeBool, value)
	}
	if value, ok := _u.mutation.CdnURL(); ok {
		_spec.SetField(storageprovider.FieldCdnURL, field.TypeString, value)
	}
	if _u.mutation.CdnURLCleared() {
		_spec.ClearField(storageprovider.FieldCdnURL, field.TypeString)
	}
	if _u.mutation.CloudfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   storageprovider.CloudfilesTable,
			Columns: []string{storageprovider.CloudfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudfile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCloudfilesIDs(); len(nodes) > 0 && !_u.mutation.CloudfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   storageprovider.CloudfilesTable,
			Columns: []string{storageprovider.CloudfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudfile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CloudfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   storageprovider.CloudfilesTable,
			Columns: []string{storageprovider.CloudfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudfile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StorageProvider{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storageprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
