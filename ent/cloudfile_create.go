// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/suyuan32/simple-admin-file/ent/cloudfile"
	"github.com/suyuan32/simple-admin-file/ent/cloudfiletag"
	"github.com/suyuan32/simple-admin-file/ent/storageprovider"
)

// CloudFileCreate is the builder for creating a CloudFile entity.
type CloudFileCreate struct {
	config
	mutation *CloudFileMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *CloudFileCreate) SetCreatedAt(v time.Time) *CloudFileCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *CloudFileCreate) SetNillableCreatedAt(v *time.Time) *CloudFileCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *CloudFileCreate) SetUpdatedAt(v time.Time) *CloudFileCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *CloudFileCreate) SetNillableUpdatedAt(v *time.Time) *CloudFileCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetState sets the "state" field.
func (_c *CloudFileCreate) SetState(v bool) *CloudFileCreate {
	_c.mutation.SetState(v)
	return _c
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_c *CloudFileCreate) SetNillableState(v *bool) *CloudFileCreate {
	if v != nil {
		_c.SetState(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *CloudFileCreate) SetName(v string) *CloudFileCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetURL sets the "url" field.
func (_c *CloudFileCreate) SetURL(v string) *CloudFileCreate {
	_c.mutation.SetURL(v)
	return _c
}

// SetSize sets the "size" field.
func (_c *CloudFileCreate) SetSize(v uint64) *CloudFileCreate {
	_c.mutation.SetSize(v)
	return _c
}

// SetFileType sets the "file_type" field.
func (_c *CloudFileCreate) SetFileType(v uint8) *CloudFileCreate {
	_c.mutation.SetFileType(v)
	return _c
}

// SetUserID sets the "user_id" field.
func (_c *CloudFileCreate) SetUserID(v string) *CloudFileCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetID sets the "id" field.
func (_c *CloudFileCreate) SetID(v uuid.UUID) *CloudFileCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *CloudFileCreate) SetNillableID(v *uuid.UUID) *CloudFileCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetStorageProvidersID sets the "storage_providers" edge to the StorageProvider entity by ID.
func (_c *CloudFileCreate) SetStorageProvidersID(id uint64) *CloudFileCreate {
	_c.mutation.SetStorageProvidersID(id)
	return _c
}

// SetNillableStorageProvidersID sets the "storage_providers" edge to the StorageProvider entity by ID if the given value is not nil.
func (_c *CloudFileCreate) SetNillableStorageProvidersID(id *uint64) *CloudFileCreate {
	if id != nil {
		_c = _c.SetStorageProvidersID(*id)
	}
	return _c
}

// SetStorageProviders sets the "storage_providers" edge to the StorageProvider entity.
func (_c *CloudFileCreate) SetStorageProviders(v *StorageProvider) *CloudFileCreate {
	return _c.SetStorageProvidersID(v.ID)
}

// AddTagIDs adds the "tags" edge to the CloudFileTag entity by IDs.
func (_c *CloudFileCreate) AddTagIDs(ids ...uint64) *CloudFileCreate {
	_c.mutation.AddTagIDs(ids...)
	return _c
}

// AddTags adds the "tags" edges to the CloudFileTag entity.
func (_c *CloudFileCreate) AddTags(v ...*CloudFileTag) *CloudFileCreate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTagIDs(ids...)
}

// Mutation returns the CloudFileMutation object of the builder.
func (_c *CloudFileCreate) Mutation() *CloudFileMutation {
	return _c.mutation
}

// Save creates the CloudFile in the database.
func (_c *CloudFileCreate) Save(ctx context.Context) (*CloudFile, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *CloudFileCreate) SaveX(ctx context.Context) *CloudFile {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CloudFileCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CloudFileCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *CloudFileCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := cloudfile.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := cloudfile.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.State(); !ok {
		v := cloudfile.DefaultState
		_c.mutation.SetState(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := cloudfile.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *CloudFileCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CloudFile.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CloudFile.updated_at"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CloudFile.name"`)}
	}
	if _, ok := _c.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "CloudFile.url"`)}
	}
	if _, ok := _c.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "CloudFile.size"`)}
	}
	if _, ok := _c.mutation.FileType(); !ok {
		return &ValidationError{Name: "file_type", err: errors.New(`ent: missing required field "CloudFile.file_type"`)}
	}
	if _, ok := _c.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "CloudFile.user_id"`)}
	}
	return nil
}

func (_c *CloudFileCreate) sqlSave(ctx context.Context) (*CloudFile, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *CloudFileCreate) createSpec() (*CloudFile, *sqlgraph.CreateSpec) {
	var (
		_node = &CloudFile{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(cloudfile.Table, sqlgraph.NewFieldSpec(cloudfile.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(cloudfile.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(cloudfile.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.State(); ok {
		_spec.SetField(cloudfile.FieldState, field.TypeBool, value)
		_node.State = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(cloudfile.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.URL(); ok {
		_spec.SetField(cloudfile.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := _c.mutation.Size(); ok {
		_spec.SetField(cloudfile.FieldSize, field.TypeUint64, value)
		_node.Size = value
	}
	if value, ok := _c.mutation.FileType(); ok {
		_spec.SetField(cloudfile.FieldFileType, field.TypeUint8, value)
		_node.FileType = value
	}
	if value, ok := _c.mutation.UserID(); ok {
		_spec.SetField(cloudfile.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if nodes := _c.mutation.StorageProvidersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cloudfile.StorageProvidersTable,
			Columns: []string{cloudfile.StorageProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storageprovider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.cloud_file_storage_providers = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   cloudfile.TagsTable,
			Columns: cloudfile.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudfiletag.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CloudFileCreateBulk is the builder for creating many CloudFile entities in bulk.
type CloudFileCreateBulk struct {
	config
	err      error
	builders []*CloudFileCreate
}

// Save creates the CloudFile entities in the database.
func (_c *CloudFileCreateBulk) Save(ctx context.Context) ([]*CloudFile, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*CloudFile, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CloudFileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *CloudFileCreateBulk) SaveX(ctx context.Context) []*CloudFile {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CloudFileCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CloudFileCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
