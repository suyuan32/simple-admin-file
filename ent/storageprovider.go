// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/suyuan32/simple-admin-file/ent/storageprovider"
)

// Cloud File's Provider Configuration Table | 云文件服务商配置表
type StorageProvider struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// State true: normal false: ban | 状态 true 正常 false 禁用
	State bool `json:"state,omitempty"`
	// The cloud storage service name | 服务名称
	Name string `json:"name,omitempty"`
	// The cloud storage bucket name | 云存储服务的存储桶
	Bucket string `json:"bucket,omitempty"`
	// The secret ID | 密钥 ID
	SecretID string `json:"secret_id,omitempty"`
	// The secret key | 密钥 Key
	SecretKey string `json:"secret_key,omitempty"`
	// The service URL | 服务器地址
	Endpoint string `json:"endpoint,omitempty"`
	// The folder in cloud | 云服务目标文件夹
	Folder string `json:"folder,omitempty"`
	// The service region | 服务器所在地区
	Region string `json:"region,omitempty"`
	// Is it the default provider | 是否为默认提供商
	IsDefault bool `json:"is_default,omitempty"`
	// Does it use CDN | 是否使用 CDN
	UseCdn bool `json:"use_cdn,omitempty"`
	// CDN URL | CDN 地址
	CdnURL string `json:"cdn_url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StorageProviderQuery when eager-loading is set.
	Edges        StorageProviderEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StorageProviderEdges holds the relations/edges for other nodes in the graph.
type StorageProviderEdges struct {
	// Cloudfiles holds the value of the cloudfiles edge.
	Cloudfiles []*CloudFile `json:"cloudfiles,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CloudfilesOrErr returns the Cloudfiles value or an error if the edge
// was not loaded in eager-loading.
func (e StorageProviderEdges) CloudfilesOrErr() ([]*CloudFile, error) {
	if e.loadedTypes[0] {
		return e.Cloudfiles, nil
	}
	return nil, &NotLoadedError{edge: "cloudfiles"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StorageProvider) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case storageprovider.FieldState, storageprovider.FieldIsDefault, storageprovider.FieldUseCdn:
			values[i] = new(sql.NullBool)
		case storageprovider.FieldID:
			values[i] = new(sql.NullInt64)
		case storageprovider.FieldName, storageprovider.FieldBucket, storageprovider.FieldSecretID, storageprovider.FieldSecretKey, storageprovider.FieldEndpoint, storageprovider.FieldFolder, storageprovider.FieldRegion, storageprovider.FieldCdnURL:
			values[i] = new(sql.NullString)
		case storageprovider.FieldCreatedAt, storageprovider.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StorageProvider fields.
func (_m *StorageProvider) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case storageprovider.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = uint64(value.Int64)
		case storageprovider.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case storageprovider.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case storageprovider.FieldState:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				_m.State = value.Bool
			}
		case storageprovider.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case storageprovider.FieldBucket:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bucket", values[i])
			} else if value.Valid {
				_m.Bucket = value.String
			}
		case storageprovider.FieldSecretID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secret_id", values[i])
			} else if value.Valid {
				_m.SecretID = value.String
			}
		case storageprovider.FieldSecretKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secret_key", values[i])
			} else if value.Valid {
				_m.SecretKey = value.String
			}
		case storageprovider.FieldEndpoint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field endpoint", values[i])
			} else if value.Valid {
				_m.Endpoint = value.String
			}
		case storageprovider.FieldFolder:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field folder", values[i])
			} else if value.Valid {
				_m.Folder = value.String
			}
		case storageprovider.FieldRegion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field region", values[i])
			} else if value.Valid {
				_m.Region = value.String
			}
		case storageprovider.FieldIsDefault:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_default", values[i])
			} else if value.Valid {
				_m.IsDefault = value.Bool
			}
		case storageprovider.FieldUseCdn:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field use_cdn", values[i])
			} else if value.Valid {
				_m.UseCdn = value.Bool
			}
		case storageprovider.FieldCdnURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cdn_url", values[i])
			} else if value.Valid {
				_m.CdnURL = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StorageProvider.
// This includes values selected through modifiers, order, etc.
func (_m *StorageProvider) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryCloudfiles queries the "cloudfiles" edge of the StorageProvider entity.
func (_m *StorageProvider) QueryCloudfiles() *CloudFileQuery {
	return NewStorageProviderClient(_m.config).QueryCloudfiles(_m)
}

// Update returns a builder for updating this StorageProvider.
// Note that you need to call StorageProvider.Unwrap() before calling this method if this StorageProvider
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *StorageProvider) Update() *StorageProviderUpdateOne {
	return NewStorageProviderClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the StorageProvider entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *StorageProvider) Unwrap() *StorageProvider {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: StorageProvider is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *StorageProvider) String() string {
	var builder strings.Builder
	builder.WriteString("StorageProvider(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", _m.State))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("bucket=")
	builder.WriteString(_m.Bucket)
	builder.WriteString(", ")
	builder.WriteString("secret_id=")
	builder.WriteString(_m.SecretID)
	builder.WriteString(", ")
	builder.WriteString("secret_key=")
	builder.WriteString(_m.SecretKey)
	builder.WriteString(", ")
	builder.WriteString("endpoint=")
	builder.WriteString(_m.Endpoint)
	builder.WriteString(", ")
	builder.WriteString("folder=")
	builder.WriteString(_m.Folder)
	builder.WriteString(", ")
	builder.WriteString("region=")
	builder.WriteString(_m.Region)
	builder.WriteString(", ")
	builder.WriteString("is_default=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsDefault))
	builder.WriteString(", ")
	builder.WriteString("use_cdn=")
	builder.WriteString(fmt.Sprintf("%v", _m.UseCdn))
	builder.WriteString(", ")
	builder.WriteString("cdn_url=")
	builder.WriteString(_m.CdnURL)
	builder.WriteByte(')')
	return builder.String()
}

// StorageProviders is a parsable slice of StorageProvider.
type StorageProviders []*StorageProvider
