// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/suyuan32/simple-admin-file/ent/cloudfile"
	"github.com/suyuan32/simple-admin-file/ent/cloudfiletag"
	"github.com/suyuan32/simple-admin-file/ent/predicate"
)

// CloudFileTagUpdate is the builder for updating CloudFileTag entities.
type CloudFileTagUpdate struct {
	config
	hooks    []Hook
	mutation *CloudFileTagMutation
}

// Where appends a list predicates to the CloudFileTagUpdate builder.
func (_u *CloudFileTagUpdate) Where(ps ...predicate.CloudFileTag) *CloudFileTagUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CloudFileTagUpdate) SetUpdatedAt(v time.Time) *CloudFileTagUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *CloudFileTagUpdate) SetStatus(v uint8) *CloudFileTagUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *CloudFileTagUpdate) SetNillableStatus(v *uint8) *CloudFileTagUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *CloudFileTagUpdate) AddStatus(v int8) *CloudFileTagUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *CloudFileTagUpdate) ClearStatus() *CloudFileTagUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetName sets the "name" field.
func (_u *CloudFileTagUpdate) SetName(v string) *CloudFileTagUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CloudFileTagUpdate) SetNillableName(v *string) *CloudFileTagUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetRemark sets the "remark" field.
func (_u *CloudFileTagUpdate) SetRemark(v string) *CloudFileTagUpdate {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *CloudFileTagUpdate) SetNillableRemark(v *string) *CloudFileTagUpdate {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *CloudFileTagUpdate) ClearRemark() *CloudFileTagUpdate {
	_u.mutation.ClearRemark()
	return _u
}

// AddCloudFileIDs adds the "cloud_files" edge to the CloudFile entity by IDs.
func (_u *CloudFileTagUpdate) AddCloudFileIDs(ids ...uuid.UUID) *CloudFileTagUpdate {
	_u.mutation.AddCloudFileIDs(ids...)
	return _u
}

// AddCloudFiles adds the "cloud_files" edges to the CloudFile entity.
func (_u *CloudFileTagUpdate) AddCloudFiles(v ...*CloudFile) *CloudFileTagUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCloudFileIDs(ids...)
}

// Mutation returns the CloudFileTagMutation object of the builder.
func (_u *CloudFileTagUpdate) Mutation() *CloudFileTagMutation {
	return _u.mutation
}

// ClearCloudFiles clears all "cloud_files" edges to the CloudFile entity.
func (_u *CloudFileTagUpdate) ClearCloudFiles() *CloudFileTagUpdate {
	_u.mutation.ClearCloudFiles()
	return _u
}

// RemoveCloudFileIDs removes the "cloud_files" edge to CloudFile entities by IDs.
func (_u *CloudFileTagUpdate) RemoveCloudFileIDs(ids ...uuid.UUID) *CloudFileTagUpdate {
	_u.mutation.RemoveCloudFileIDs(ids...)
	return _u
}

// RemoveCloudFiles removes "cloud_files" edges to CloudFile entities.
func (_u *CloudFileTagUpdate) RemoveCloudFiles(v ...*CloudFile) *CloudFileTagUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCloudFileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CloudFileTagUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CloudFileTagUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CloudFileTagUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CloudFileTagUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CloudFileTagUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := cloudfiletag.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *CloudFileTagUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(cloudfiletag.Table, cloudfiletag.Columns, sqlgraph.NewFieldSpec(cloudfiletag.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(cloudfiletag.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(cloudfiletag.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(cloudfiletag.FieldStatus, field.TypeUint8, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(cloudfiletag.FieldStatus, field.TypeUint8)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(cloudfiletag.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(cloudfiletag.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(cloudfiletag.FieldRemark, field.TypeString)
	}
	if _u.mutation.CloudFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cloudfiletag.CloudFilesTable,
			Columns: cloudfiletag.CloudFilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudfile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCloudFilesIDs(); len(nodes) > 0 && !_u.mutation.CloudFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cloudfiletag.CloudFilesTable,
			Columns: cloudfiletag.CloudFilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudfile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CloudFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cloudfiletag.CloudFilesTable,
			Columns: cloudfiletag.CloudFilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudfile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cloudfiletag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// CloudFileTagUpdateOne is the builder for updating a single CloudFileTag entity.
type CloudFileTagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CloudFileTagMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CloudFileTagUpdateOne) SetUpdatedAt(v time.Time) *CloudFileTagUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *CloudFileTagUpdateOne) SetStatus(v uint8) *CloudFileTagUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *CloudFileTagUpdateOne) SetNillableStatus(v *uint8) *CloudFileTagUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *CloudFileTagUpdateOne) AddStatus(v int8) *CloudFileTagUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *CloudFileTagUpdateOne) ClearStatus() *CloudFileTagUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetName sets the "name" field.
func (_u *CloudFileTagUpdateOne) SetName(v string) *CloudFileTagUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CloudFileTagUpdateOne) SetNillableName(v *string) *CloudFileTagUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetRemark sets the "remark" field.
func (_u *CloudFileTagUpdateOne) SetRemark(v string) *CloudFileTagUpdateOne {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *CloudFileTagUpdateOne) SetNillableRemark(v *string) *CloudFileTagUpdateOne {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *CloudFileTagUpdateOne) ClearRemark() *CloudFileTagUpdateOne {
	_u.mutation.ClearRemark()
	return _u
}

// AddCloudFileIDs adds the "cloud_files" edge to the CloudFile entity by IDs.
func (_u *CloudFileTagUpdateOne) AddCloudFileIDs(ids ...uuid.UUID) *CloudFileTagUpdateOne {
	_u.mutation.AddCloudFileIDs(ids...)
	return _u
}

// AddCloudFiles adds the "cloud_files" edges to the CloudFile entity.
func (_u *CloudFileTagUpdateOne) AddCloudFiles(v ...*CloudFile) *CloudFileTagUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCloudFileIDs(ids...)
}

// Mutation returns the CloudFileTagMutation object of the builder.
func (_u *CloudFileTagUpdateOne) Mutation() *CloudFileTagMutation {
	return _u.mutation
}

// ClearCloudFiles clears all "cloud_files" edges to the CloudFile entity.
func (_u *CloudFileTagUpdateOne) ClearCloudFiles() *CloudFileTagUpdateOne {
	_u.mutation.ClearCloudFiles()
	return _u
}

// RemoveCloudFileIDs removes the "cloud_files" edge to CloudFile entities by IDs.
func (_u *CloudFileTagUpdateOne) RemoveCloudFileIDs(ids ...uuid.UUID) *CloudFileTagUpdateOne {
	_u.mutation.RemoveCloudFileIDs(ids...)
	return _u
}

// RemoveCloudFiles removes "cloud_files" edges to CloudFile entities.
func (_u *CloudFileTagUpdateOne) RemoveCloudFiles(v ...*CloudFile) *CloudFileTagUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCloudFileIDs(ids...)
}

// Where appends a list predicates to the CloudFileTagUpdate builder.
func (_u *CloudFileTagUpdateOne) Where(ps ...predicate.CloudFileTag) *CloudFileTagUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CloudFileTagUpdateOne) Select(field string, fields ...string) *CloudFileTagUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated CloudFileTag entity.
func (_u *CloudFileTagUpdateOne) Save(ctx context.Context) (*CloudFileTag, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CloudFileTagUpdateOne) SaveX(ctx context.Context) *CloudFileTag {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CloudFileTagUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CloudFileTagUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CloudFileTagUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := cloudfiletag.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *CloudFileTagUpdateOne) sqlSave(ctx context.Context) (_node *CloudFileTag, err error) {
	_spec := sqlgraph.NewUpdateSpec(cloudfiletag.Table, cloudfiletag.Columns, sqlgraph.NewFieldSpec(cloudfiletag.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CloudFileTag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cloudfiletag.FieldID)
		for _, f := range fields {
			if !cloudfiletag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cloudfiletag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(cloudfiletag.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(cloudfiletag.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(cloudfiletag.FieldStatus, field.TypeUint8, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(cloudfiletag.FieldStatus, field.TypeUint8)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(cloudfiletag.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(cloudfiletag.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(cloudfiletag.FieldRemark, field.TypeString)
	}
	if _u.mutation.CloudFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cloudfiletag.CloudFilesTable,
			Columns: cloudfiletag.CloudFilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudfile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCloudFilesIDs(); len(nodes) > 0 && !_u.mutation.CloudFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cloudfiletag.CloudFilesTable,
			Columns: cloudfiletag.CloudFilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudfile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CloudFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cloudfiletag.CloudFilesTable,
			Columns: cloudfiletag.CloudFilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudfile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CloudFileTag{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cloudfiletag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
